styler:::style_selection()
styler:::style_selection()
View(protest_data)
styler:::style_selection()
styler:::style_selection()
# 1.a Load the tidyverse package and the dplyr package
library("dplyr")
library("tidyverse")
state_ratio <- states %>%
group_by(state) %>%
filter(date == max(date, na.rm = TRUE)) %>%
mutate(Ratio = deaths/cases)
# 2.e Which state has the highest ratio of deaths to cases (deaths/cases), as of the most recent date? Make sure to pull() this value
# HINT: You may need to create a new column in order to do this. `state_highest_ratio`
state_highest_ratio <- states %>%
filter(date == max(date, na.rm = TRUE)) %>%
mutate(Ratio = deaths/cases) %>%
filter(Ratio == max(Ratio, na.rm = TRUE))
# 1.a Load the tidyverse package and the dplyr package
library("dplyr")
library("tidyverse")
# 1.b Load the *national level* data from the following URL into a variable called `national`
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv
national <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv")
# 1.c Load the *state level* data from the following URL into a variable called `states`
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-states-covid-2023.csv
states <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-states-covid-2023.csv")
# 1.d Load the *county level* data from the following URL into a variable called `counties`
# NOTE: This is a large dataset. It may take 30-60 seconds to load.
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-counties-covid-2023.csv
counties <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-counties-covid-2023.csv")
obs_national <- nrow(national)
obs_national
obs_states <- nrow(states)
obs_states
obs_counties <- nrow(counties)
obs_counties
obs_national <- nrow(national)
obs_national
obs_states <- nrow(states)
obs_states
obs_counties <- nrow(counties)
obs_counties
obs_national <- nrow(national)
obs_national
obs_states <- nrow(states)
obs_states
obs_counties <- nrow(counties)
obs_counties
# 1.e How many observations (rows) are in each dataset?
# Create `obs_national`, `obs_states`, `obs_counties`
obs_national <- nrow(national)
obs_national
# 1.e How many observations (rows) are in each dataset?
# Create `obs_national`, `obs_states`, `obs_counties`
obs_national <- nrow(national)
# 1.e How many observations (rows) are in each dataset?
# Create `obs_national`, `obs_states`, `obs_counties`
obs_national <- nrow(national)
obs_national
obs_states <- nrow(states)
obs_states
num_features_national <- ncol(national)
num_features_states <- ncol(states)
num_features_counties <- ncol(counties)
national$date <- as.Date(national$date)
total_us_cases <- national %>%
filter(date == max(date, na.rm = TRUE)) %>% pull(cases)
total_us_cases
total_us_deaths <- national %>%
filter(date == max(date, na.rm = TRUE)) %>% pull(deaths)
state_highest_cases <- states %>%
filter(cases == max(cases)) %>%
pull(state)
num_highest_state <- states %>%
filter(cases == max(cases)) %>%
pull(cases)
state_highest_ratio <- states %>%
filter(date == max(date, na.rm = TRUE)) %>%
mutate(Ratio = deaths/cases) %>%
filter(Ratio == max(Ratio, na.rm = TRUE))
View(state_highest_ratio)
state_highest_ratio <- states %>%
filter(date == max(date, na.rm = TRUE)) %>%
mutate(Ratio = deaths/cases) %>%
filter(Ratio == max(Ratio, na.rm = TRUE)) %>%
pull(state)
# 2.f Which state has had the fewest number of cases as of the most
# recent date? Make sure to pull() this value `state_lowest_cases`
state_lowest_cases <- states %>%
filter(date == max(date, na.rm = TRUE)) %>%
filter(cases == min(cases, na.rm = TRUE)) %>%
pull(state)
View(counties)
# 2.g Which county has had the highest number of cases? Make sure to pull() this number `county_highest_cases`
county_highest_cases <- counties %>%
filter(date == max(date, na.rm = TRUE)) %>%
filter(cases == max(cases, na.rm =TRUE)) %>%
pull(cases)
# 2.g Which county has had the highest number of cases? Make sure to pull() this number `county_highest_cases`
county_highest_cases <- counties %>%
filter(date == max(date, na.rm = TRUE)) %>%
filter(cases == max(cases, na.rm =TRUE)) %>%
pull(county)
# 2.g Which county has had the highest number of cases? Make sure to pull() this number `county_highest_cases`
county_highest_cases <- counties %>%
filter(date == max(date, na.rm = TRUE)) %>%
filter(cases == max(cases, na.rm =TRUE)) %>%
pull(cases)
view(county_highest_cases)
# 2.g Which county has had the highest number of cases? Make sure to pull() this number `county_highest_cases`
county_highest_cases <- counties %>%
filter(date == max(date, na.rm = TRUE)) %>%
filter(cases == max(cases, na.rm =TRUE)) %>%
pull(county)
# 2.h What is the highest number of cases that have happened in a single county? Make sure to pull() this number `num_highest_cases_county`
num_highest_cases_county <- counties %>%
filter(date == max(date, na.rm = TRUE)) %>%
filter(cases == max(cases, na.rm =TRUE)) %>%
pull(number)
# 2.h What is the highest number of cases that have happened in a single county? Make sure to pull() this number `num_highest_cases_county`
num_highest_cases_county <- counties %>%
filter(date == max(date, na.rm = TRUE)) %>%
filter(cases == max(cases, na.rm =TRUE)) %>%
pull(cases)
# 2.i Because there are multiple counties with the same name across states, it will be helpful to have a column that stores the county and state together, in this form: "COUNTY, STATE".
# Therefore, add a new column to your `counties` data frame called `location` that stores the county and state (separated by a comma and space).
counties_with_state <- counties %>%
mutate(location=paste0(county,", ", state))
View(counties_with_state)
# 2.i Because there are multiple counties with the same name across states, it will be helpful to have a column that stores the county and state together, in this form: "COUNTY, STATE".
# Therefore, add a new column to your `counties` data frame called `location` that stores the county and state (separated by a comma and space).
counties <- counties %>%
mutate(location=paste0(county,", ", state))
View(counties)
View(counties_with_state)
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>%
filter(date == max(date, na.rm = TRUE)) %>%
filter(deaths == max(deaths, na.rm =TRUE)) %>%
pull(location)
# 2.k Add a new column to your `national` data frame called `new_cases` — that is, the number new cases each day.
# HINT: The dyplr lag() function will be very helpful here.
national <- national %>%
mutate(new_cases=lag(cases))
View(national)
# 2.k Add a new column to your `national` data frame called `new_cases` — that is, the number new cases each day.
# HINT: The dyplr lag() function will be very helpful here.
national <- national %>%
mutate(new_cases = cases - lag(cases))
View(national)
# 2.l Similarly, the `deaths` columns is *not* the number of new deaths per day.
# Add  a new column to the `national` data frame called `new_deaths` that has the number of *new* deaths each day.
# HINT: The dyplr lag() function will be very helpful here.
national <- national %>%
mutate(new_deaths = deaths - lag(deaths))
# 2.m What was the date when the most new cases in the U.S. occurred? Make sure to pull() this value `date_most_cases`
date_most_cases <- national %>%
filter(new_cases == max(new_cases, na.rm = TRUE)) %>%
pull(date)
# 2.n What was the date when the most new deaths in the U.S. occurred? Make sure to pull() this value `date_most_deaths`
date_most_deaths <- national %>%
filter(new_deaths == max(new_deaths, na.rm = TRUE)) %>%
pull(date)
# 2.o How many people died on the date when the most deaths occurred? Make sure to pull() this value `most_deaths`
date_most_deaths <- national %>%
filter(new_deaths == max(new_deaths, na.rm = TRUE)) %>%
pull(new_deaths)
# 2.n What was the date when the most new deaths in the U.S. occurred? Make sure to pull() this value `date_most_deaths`
date_most_deaths <- national %>%
filter(new_deaths == max(new_deaths, na.rm = TRUE)) %>%
pull(date)
# 2.o How many people died on the date when the most deaths occurred? Make sure to pull() this value `most_deaths`
most_deaths <- national %>%
filter(new_deaths == max(new_deaths, na.rm = TRUE)) %>%
pull(new_deaths)
# You can plot this data with built-in plot functions
plot(national$new_cases)
plot(national$new_deaths)
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- states %>%
group_by(state) %>%
filter(cases == max(cases, na.rm = TRUE))
View(highest_cases_in_each_state)
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- states %>%
group_by(state) %>%
filter(deaths == min(deaths, na.rm = TRUE))
View(lowest_deaths_in_each_state)
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>%
group_by(state) %>%
filter(cases == max(cases, na.rm = TRUE))
View(highest_cases_in_each_state)
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>%
group_by(state) %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
pull(county)
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>%
group_by(state) %>%
filter(county == max(cases, na.rm = TRUE))
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>%
group_by(state) %>%
filter(cases == max(cases, na.rm = TRUE))
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>%
group_by(state) %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
filter(date == max(date, na.rm = TRUE))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>%
group_by(state) %>%
filter(deaths == min(deaths, na.rm = TRUE)) %>%
filter(date == max(date, na.rm = TRUE))
View(lowest_deaths_in_each_state)
# 4.a Create a `total_cases_counties` dataframe that adds up all the COVID cases for all the counties for every date in the counties dataframe.
# You should name the columns `date` and `county_total_cases`.
total_cases_counties <- counties %>%
divide_by(date) %>%
summarize(counties,
date = date,
county_total_cases = sum(cases, na.rm = TRUE))
# 4.a Create a `total_cases_counties` dataframe that adds up all the COVID cases for all the counties for every date in the counties dataframe.
# You should name the columns `date` and `county_total_cases`.
total_cases_counties <- counties %>%
grouop_by(date) %>%
summarize(counties,
date = date,
county_total_cases = sum(cases, na.rm = TRUE))
# 4.a Create a `total_cases_counties` dataframe that adds up all the COVID cases for all the counties for every date in the counties dataframe.
# You should name the columns `date` and `county_total_cases`.
total_cases_counties <- counties %>%
group_by(date) %>%
summarize(counties,
date = date,
county_total_cases = sum(cases, na.rm = TRUE))
view(total_cases_counties)
View(total_cases_counties)
# 4.a Create a `total_cases_counties` dataframe that adds up all the COVID cases for all the counties for every date in the counties dataframe.
# You should name the columns `date` and `county_total_cases`.
total_cases_counties <- counties %>%
group_by(date) %>%
summarize(counties,
date = date,
county_total_cases = sum(cases, na.rm = TRUE))
# 4.a Create a `total_cases_counties` dataframe that adds up all the COVID cases for all the counties for every date in the counties dataframe.
# You should name the columns `date` and `county_total_cases`.
total_cases_counties <- counties %>%
group_by(date) %>%
summarize(date = date,
county_total_cases = sum(cases, na.rm = TRUE))
# 4.a Create a `total_cases_counties` dataframe that adds up all the COVID cases for all the counties for every date in the counties dataframe.
# You should name the columns `date` and `county_total_cases`.
total_cases_counties <- counties %>%
group_by(date) %>%
summarize(counties,
county_total_cases = sum(cases, na.rm = TRUE))
View(total_cases_counties)
View(total_cases_counties)
View(total_cases_counties)
View(total_cases_counties)
View(total_cases_counties)
View(total_cases_counties)
View(total_cases_counties)
# 4.b Join `total_cases_counties` with the `national` dataframe.
# Save this dataframe as `all_totals`.
all_totals <- join(national, total_cases_counties, by = "date")
# 4.b Join `total_cases_counties` with the `national` dataframe.
# Save this dataframe as `all_totals`.
all_totals <- left_join(national, total_cases_counties, by = "date")
national$date<- as.Date(national$date)
total_cases_counties$date <- as.Date(national$date)
# 4.a Create a `total_cases_counties` dataframe that adds up all the COVID cases for all the counties for every date in the counties dataframe.
# You should name the columns `date` and `county_total_cases`.
total_cases_counties <- counties %>%
group_by(date) %>%
summarize(counties,
county_total_cases = sum(cases, na.rm = TRUE))
national$date<- as.Date(national$date)
total_cases_counties$date <- as.Date(national$date)
all_totals <- left_join(national, total_cases_counties, by = "date")
all_totals <- left_join(national, total_cases_counties)
all_totals <- left_join(total_cases_counties, national)
View(national)
national$date<- as.Date(national$date)
total_cases_counties$date <- as.Date(national$date)
# 4.b Join `total_cases_counties` with the `national` dataframe.
# Save this dataframe as `all_totals`.
national$date<- as.Date(national$date)
total_cases_counties$date <- as.Date(national$date)
all_totals <- left_join(total_cases_counties, national)
total_cases_counties$date <- as.Date(national$date)
total_cases_counties$date <- as.Date(total_cases_counties$date)
all_totals <- left_join(total_cases_counties, national)
View(all_totals)
# 4.c Filter the all_totals dataframe to find only the rows where the "county_total_cases" column does not match the "cases" column
# Save as national_county_diff
national_county_diff <- all_totals %>%
filter(county_total_cases != cases)
View(national_county_diff)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_country_diff)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
View(states)
View(all_totals)
View(counties)
View(lowest_deaths_in_each_state)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
states <- states %>%
group_by(state) %>%
mutate(new_cases = cases - lag(cases))
View(states)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
states <- states %>%
group_by(state)
states <- states %>%
group_by(state)
View(states)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
states_grouped <- states %>%
group_by(state)
View(states_grouped)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
states<- states %>%
group_by(state) %>%
mutate(new_cases = cases - lag(cases)) %>%
filter(new_cases == max(new_cases, na.rm = TRUE))
View(states)
states<- states %>%
group_by(state) %>%
mutate(new_cases = cases - lag(cases)) %>%
filter(max_new_cases == max(new_cases, na.rm = TRUE))
states<- states %>%
group_by(state) %>%
mutate(max_new_cases = cases - lag(cases)) %>%
filter(max_new_cases == max(new_cases, na.rm = TRUE))
# 1.c Load the *state level* data from the following URL into a variable called `states`
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-states-covid-2023.csv
states <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-states-covid-2023.csv")
View(states)
# 1.c Load the *state level* data from the following URL into a variable called `states`
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-states-covid-2023.csv
states <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-states-covid-2023.csv")
states<- states %>%
group_by(state) %>%
mutate(max_new_cases = cases - lag(cases)) %>%
filter(max_new_cases == max(new_cases, na.rm = TRUE))
states<- states %>%
group_by(state) %>%
mutate(max_new_cases = cases - lag(cases)) %>%
filter(max_new_cases == max(max_new_cases, na.rm = TRUE))
states<- states %>%
group_by(state) %>%
mutate(new_cases = cases - lag(cases)) %>%
filter(new_cases == max(new_cases, na.rm = TRUE))
states<- states %>%
group_by(state) %>%
mutate(new_cases = cases - lag(cases)) %>%
filter(new_cases == max(new_cases, na.rm = TRUE))
# 1.c Load the *state level* data from the following URL into a variable called `states`
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-states-covid-2023.csv
states <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-states-covid-2023.csv")
states<- states %>%
group_by(state) %>%
mutate(new_cases = cases - lag(cases)) %>%
filter(new_cases == max(new_cases, na.rm = TRUE))
View(states)
# 1.c Load the *state level* data from the following URL into a variable called `states`
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-states-covid-2023.csv
states <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-states-covid-2023.csv")
states_max_new_cases <- states %>%
group_by(state) %>%
mutate(new_cases = cases - lag(cases)) %>%
filter(new_cases == max(new_cases, na.rm = TRUE))
View(states_max_new_cases)
View(states)
# 1.a Load the tidyverse package and the dplyr package
library("dplyr")
library("tidyverse")
# 1.b Load the *national level* data from the following URL into a variable called `national`
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv
national <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv")
# 1.c Load the *state level* data from the following URL into a variable called `states`
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-states-covid-2023.csv
states <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-states-covid-2023.csv")
# 1.d Load the *county level* data from the following URL into a variable called `counties`
# NOTE: This is a large dataset. It may take 30-60 seconds to load.
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-counties-covid-2023.csv
counties <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-counties-covid-2023.csv")
# 1.d Load the *county level* data from the following URL into a variable called `counties`
# NOTE: This is a large dataset. It may take 30-60 seconds to load.
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-counties-covid-2023.csv
counties <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-counties-covid-2023.csv")
library(dplyr)
og_data <- read.csv("forbes_2022_billionaires.csv", stringsAsFactors = FALSE)
og_data <- read.csv("forbes_2022_billionaires.csv", stringsAsFactors = FALSE)
library(dplyr)
library(dplyr)
og_data <- read.csv("forbes_2022_billionaires.csv", stringsAsFactors = FALSE)
print(getwd())
setwd("/Users/gilliansoekawan/Desktop/info-201/finall-project-proposal-megancuan")
set
setwd("/Users/gilliansoekawan/Desktop/info-201/finall-project-proposal-megancuan")
library(dplyr)
og_data <- read.csv("forbes_2022_billionaires.csv", stringsAsFactors = FALSE)
setwd("/Users/gilliansoekawan/Desktop/info-201/exploratory-analysis-jmhong04")
#Load Library
library("tidyverse")
library("dplyr")
library("ggplot2")
library("RColorBrewer")
# Load dataset
data <- na.omit(read.csv("final_dataframe.csv"))
# Plotting data
data %>% ggplot(aes(x = philanthropyScore, fill=selfMade)) +
geom_bar(position="stack") +
labs(title = "Philanthropy Score vs Number of Billionaires",
x = "Philanthropy Score (1-5)",
y = "Number of Billionaires",
color = "SelfMade") +
scale_color_brewer(palette = "Pastel1")
display.brewer.all()
data %>% ggplot(aes(x = philanthropyScore, fill=selfMade)) +
geom_bar(position="stack") +
labs(title = "Philanthropy Score vs Number of Billionaires",
x = "Philanthropy Score (1-5)",
y = "Number of Billionaires",
fill = "SelfMade") +
scale_color_brewer(palette = "Pastel1")
data %>% ggplot(aes(x = philanthropyScore, fill=selfMade)) +
geom_bar(position="stack", stat="identity") +
labs(title = "Philanthropy Score vs Number of Billionaires",
x = "Philanthropy Score (1-5)",
y = "Number of Billionaires",
fill = "SelfMade") +
scale_color_brewer(palette = "Pastel1")
data %>% ggplot(aes(x = philanthropyScore, fill=selfMade)) +
geom_bar(position="stack") +
labs(title = "Philanthropy Score vs Number of Billionaires",
x = "Philanthropy Score (1-5)",
y = "Number of Billionaires",
fill = "SelfMade") +
scale_color_brewer(palette = "Pastel1")
data %>% ggplot(aes(x = philanthropyScore, fill=selfMade)) +
geom_bar(position="stack") +
labs(title = "Philanthropy Score vs Number of Billionaires",
x = "Philanthropy Score (1-5)",
y = "Number of Billionaires",
fill = "SelfMade") +
scale_color_manual(values=c("#ADBDFF", "#3185FC"))
data %>% ggplot(aes(x = philanthropyScore, fill=selfMade)) +
geom_bar(position="stack") +
labs(title = "Philanthropy Score vs Number of Billionaires",
x = "Philanthropy Score (1-5)",
y = "Number of Billionaires",
fill = "SelfMade") +
scale_color_manual(values=c("#ADBDFF", "#3185FC"))
data %>% ggplot(aes(x = philanthropyScore, fill=selfMade)) +
geom_bar(position="stack") +
labs(title = "Philanthropy Score v. Number of Billionaires",
x = "Philanthropy Score (1-5)",
y = "Number of Billionaires",
fill = "SelfMade") +
scale_color_manual(values=c("#ADBDFF", "#3185FC"))
data %>% ggplot(aes(x = philanthropyScore, fill=selfMade)) +
geom_bar(position="stack") +
labs(title = "Philanthropy Score vs. Number of Billionaires",
x = "Philanthropy Score (1-5)",
y = "Number of Billionaires",
fill = "SelfMade") +
scale_color_manual(values=c("#ADBDFF", "#3185FC"))
knitr::kable(aggregate_table, caption = "Billionaire Data by Industry")
source("C:/Users/creat/OneDrive - UW/winter 2023/INFO 201/final project/exploratory-analysis-jmhong04/aggregate_table.R")
knitr::kable(aggregate_table, caption = "Billionaire Data by Industry")
knitr::kable(aggregate_table, caption = "Billionaire Data by Industry")
knitr::kable(aggregate_table, caption = "Billionaire Data by Industry")
knitr::kable(aggregate_table, caption = "Billionaire Data by Industry")
knitr::kable(aggregate_table, caption = "Billionaire Data by Industry")
This table groups 2022’s billionaires by the industry they work in. Furthermore, it shows the average net worth and age of the billionaires as well as the proportion of women and proportion of self-made billionaires **per industry**. The average net worth is then displayed from greatest to least in order to show, on average, which industries contain the billionaires with the highest net worth. We chose to group our aggregate table by industry because we wanted to determine if a certain industry was associated with a higher net worth or if a billionaire’s net worth was the same regardless of the industry. We also wanted to understand how some of the factors we addressed in our research questions (such as age, gender, and privilege) played out in the industries with the most successful billionaires instead of only viewing how these factors play out among all billionaires. This table reveals that the Automotive, Fashion & Retail, and Technology industries are the top three industries with billionaires who have the highest average net worth. The table reveals that the average ages across all of the industries are very similar to each other, which suggests that the billionaire's economic status might be correlated with an age around 60 years of age regardless of industry. The proportion of women in each industry is extremely low and never exceeds 0.2 revealing a low proportion of women billionaires across all industries. The proportion of billionaires who are self-made is highest in the Technology industry at 0.94 and lowest in the Diversified industry at 0.46 suggesting that there is more economic mobility in the technology industry.
knitr::kable(aggregate_table, caption = "Billionaire Data by Industry")
# Find the lowest IMDB rating for any episode of The Office and pull the value
lowest_rating <- office_df %>%
filter(Rating == min(Rating, na.rm = TRUE)) %>%
pull(unique(Rating))
The highest IMDB rating for any episode of The Office is `r highest_rating`, and the lowest rating is `r lowest_rating`.
